const BASE_URL = "https://astrologywebapp-production.up.railway.app";

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è session_token
function getSessionToken() {
  let token = localStorage.getItem("session_token");
  if (!token) {
    token = crypto.randomUUID();
    localStorage.setItem("session_token", token);
  }
  return token;
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email –∏ –ø–∞—Ä–æ–ª—å
 */
export async function requestRegister(email, password) {
  console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /auth/request-register:", { email, password });

  const response = await fetch(`${BASE_URL}/auth/request-register`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email, password }),
  });

  const data = await response.json();
  if (!response.ok) {
    const errorMessage = Array.isArray(data.detail)
      ? data.detail.map((d) => d.msg).join(", ")
      : data.detail || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏";
    throw new Error(errorMessage);
  }

  console.log("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", data);
  return data;
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∫–æ–¥ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω)
 */
export async function verifyCode(code, email, password) {
  const sessionToken = getSessionToken();

  const response = await fetch(`${BASE_URL}/auth/verify-code?code=${code}`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "X-Session-Token": sessionToken,
    },
    body: JSON.stringify({ email, password }),
  });

  const data = await response.json();
  if (!response.ok) {
    const errorMessage = Array.isArray(data.detail)
      ? data.detail.map((d) => d.msg).join(", ")
      : data.detail || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏";
    throw new Error(errorMessage);
  }

  // –£–¥–∞–ª—è–µ–º session_token, —Å–æ—Ö—Ä–∞–Ω—è–µ–º access_token
  localStorage.removeItem("session_token");
  localStorage.setItem("access_token", data.access_token);

  console.log("‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞:", data);
  return data;
}

/**
 * –õ–æ–≥–∏–Ω –ø–æ email –∏ –ø–∞—Ä–æ–ª—é
 */
export async function login(email, password) {
  const sessionToken = getSessionToken();

  const response = await fetch(`${BASE_URL}/auth/login`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "X-Session-Token": sessionToken,
    },
    body: JSON.stringify({ email, password }),
  });

  const data = await response.json();
  if (!response.ok) {
    const errorMessage = Array.isArray(data.detail)
      ? data.detail.map((d) => d.msg).join(", ")
      : data.detail || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞";
    throw new Error(errorMessage);
  }

  // –£–¥–∞–ª—è–µ–º session_token, —Å–æ—Ö—Ä–∞–Ω—è–µ–º access_token
  localStorage.removeItem("session_token");
  localStorage.setItem("access_token", data.access_token);

  console.log("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:", data);
  return data;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ access_token
 */
export async function getMe(token) {
  const response = await fetch(`${BASE_URL}/auth/me`, {
    method: "GET",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
  });

  const data = await response.json();
  if (!response.ok) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", data);
    throw new Error(data.detail || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }

  console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", data);
  return {
    id: data.id,
    email: data.email,
    photoURL: data.photoURL || null,
  };
}
