// üìÅ src/components/AskGptChat.js
import React, { useState } from "react";
import "./AskGptChat.css";

const AskGptChat = ({ chartId }) => {
  const [question, setQuestion] = useState("");
  const [answer, setAnswer] = useState("");
  const [loading, setLoading] = useState(false);

  const sendQuestion = async () => {
    if (!question.trim()) {
      console.warn("‚ùå –í–æ–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è");
      return;
    }

    if (!chartId) {
      console.error("‚ùå chartId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω");
      setAnswer("–û—à–∏–±–∫–∞: –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞:", question);
    console.log("üìå chart_id:", chartId);

    setLoading(true);
    try {
      const token = localStorage.getItem("access_token");
      const headers = {
        "Content-Type": "application/json",
      };

      if (token) {
        headers["Authorization"] = `Bearer ${token}`;
      } else {
        let sessionToken = localStorage.getItem("session_token");
        if (!sessionToken) {
          sessionToken = crypto.randomUUID();
          localStorage.setItem("session_token", sessionToken);
        }
        headers["X-Session-Token"] = sessionToken;
      }

      const response = await fetch("https://astrologywebapp-production.up.railway.app/ask-gpt", {
        method: "POST",
        headers,
        body: JSON.stringify({ chart_id: chartId, question }),
      });

      const data = await response.json();

      console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç GPT:", data);

      if (!response.ok) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç GPT:", data);
        setAnswer("–û—à–∏–±–∫–∞: " + (data.detail || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"));
      } else {
        setAnswer(data.interpretation || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT.");
      }
    } catch (e) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ fetch:", e);
      setAnswer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="askgpt-container">
      <h4>–ß–∞—Ç —Å GPT</h4>
      <textarea
        rows={3}
        value={question}
        onChange={(e) => setQuestion(e.target.value)}
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å..."
      />
      <button onClick={sendQuestion} disabled={loading}>
        {loading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–°–ø—Ä–æ—Å–∏—Ç—å"}
      </button>
      {answer && <div className="askgpt-answer">{answer}</div>}
    </div>
  );
};

export default AskGptChat;
